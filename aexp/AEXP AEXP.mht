From: "Saved by Windows Internet Explorer 7"
Subject: AEXP: AEXP
Date: Wed, 17 Oct 2007 20:59:29 -0700
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----=_NextPart_000_0077_01C81100.9C3F5E90"
X-MimeOLE: Produced By Microsoft MimeOLE V6.0.6000.16545

This is a multi-part message in MIME format.

------=_NextPart_000_0077_01C81100.9C3F5E90
Content-Type: text/html;
	charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__aexp.html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>AEXP: AEXP</TITLE>
<META http-equiv=3DContent-Type =
content=3Dtext/html;charset=3Diso-8859-1><LINK=20
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/doxygen.c=
ss"=20
type=3Dtext/css rel=3Dstylesheet><LINK=20
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/tabs.css"=
=20
type=3Dtext/css rel=3Dstylesheet>
<META content=3D"MSHTML 6.00.6000.16546" name=3DGENERATOR></HEAD>
<BODY><!-- Generated by Doxygen 1.5.1-p1 -->
<DIV class=3Dtabs>
<UL>
  <LI><A=20
  =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/index.htm=
l"><SPAN>Main&nbsp;Page</SPAN></A>=20

  <LI><A=20
  =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/modules.h=
tml"><SPAN>Modules</SPAN></A>=20

  <LI><A=20
  =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/files.htm=
l"><SPAN>Files</SPAN></A>=20

  <LI><A=20
  =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/examples.=
html"><SPAN>Examples</SPAN></A>=20
  </LI></UL></DIV>
<H1>AEXP</H1>Documentation for the public API of the Arithmetic =
Expression=20
(AEXP) module. <A=20
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#_details">More...</A>
<TABLE cellSpacing=3D0 cellPadding=3D0 border=3D0>
  <TBODY>
  <TR>
    <TD></TD></TR>
  <TR>
    <TD colSpan=3D2><BR>
      <H2>Files</H2></TD></TR>
  <TR>
    <TD class=3DmemItemLeft vAlign=3Dtop noWrap align=3Dright>file =
&nbsp;</TD>
    <TD class=3DmemItemRight vAlign=3Dbottom><A class=3Del=20
      =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/aexp_8h.h=
tml">aexp.h</A></TD></TR>
  <TR>
    <TD class=3DmdescLeft>&nbsp;</TD>
    <TD class=3DmdescRight>Public header file for the AEXP module. =
<BR></TD></TR>
  <P>
  <TR>
    <TD colSpan=3D2><BR>
      <H2>Defines</H2></TD></TR>
  <TR>
    <TD class=3DmemItemLeft vAlign=3Dtop noWrap =
align=3Dright>#define&nbsp;</TD>
    <TD class=3DmemItemRight vAlign=3Dbottom><A class=3Del=20
      =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#gd00f1d271d3cb4a7076d61dfe03724d8">AEXP_NULL_ID</A>&nbsp;&nbsp;&n=
bsp;(NULL)</TD></TR>
  <TR>
    <TD class=3DmdescLeft>&nbsp;</TD>
    <TD class=3DmdescRight>NULL-initializer for the AEXP_ID_t type. <A=20
      =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#gd00f1d271d3cb4a7076d61dfe03724d8"></A><BR></TD></TR>
  <TR>
    <TD colSpan=3D2><BR>
      <H2>Typedefs</H2></TD></TR>
  <TR>
    <TD class=3DmemItemLeft vAlign=3Dtop noWrap align=3Dright>typedef =
aexp__expr_s=20
    *&nbsp;</TD>
    <TD class=3DmemItemRight vAlign=3Dbottom><A class=3Del=20
      =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#gb3ec6d5ac4331d543a03f69bf7ad6246">AEXP_ID_t</A></TD></TR>
  <TR>
    <TD class=3DmdescLeft>&nbsp;</TD>
    <TD class=3DmdescRight>Type of the ID that represents an expression. =
<A=20
      =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#gb3ec6d5ac4331d543a03f69bf7ad6246"></A><BR></TD></TR>
  <TR>
    <TD colSpan=3D2><BR>
      <H2>Functions</H2></TD></TR>
  <TR>
    <TD class=3DmemItemLeft vAlign=3Dtop noWrap align=3Dright><A =
class=3Del=20
      =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#gb3ec6d5ac4331d543a03f69bf7ad6246">AEXP_ID_t</A>&nbsp;</TD>
    <TD class=3DmemItemRight vAlign=3Dbottom><A class=3Del=20
      =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#g9a08929905036f46eb2619404cca618b">AEXP_create_expr</A>=20
      (const char *expr_str, size_t len)</TD></TR>
  <TR>
    <TD class=3DmdescLeft>&nbsp;</TD>
    <TD class=3DmdescRight>Creates an object to represent an arithmetic=20
      expression. <A=20
      =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#g9a08929905036f46eb2619404cca618b"></A><BR></TD></TR>
  <TR>
    <TD class=3DmemItemLeft vAlign=3Dtop noWrap align=3Dright><A =
class=3Del=20
      =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#gb3ec6d5ac4331d543a03f69bf7ad6246">AEXP_ID_t</A>&nbsp;</TD>
    <TD class=3DmemItemRight vAlign=3Dbottom><A class=3Del=20
      =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#gb4c11d6b601c232ecc12c6873947bb80">AEXP_destroy_expr</A>=20
      (<A class=3Del=20
      =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#gb3ec6d5ac4331d543a03f69bf7ad6246">AEXP_ID_t</A>=20
      expr)</TD></TR>
  <TR>
    <TD class=3DmdescLeft>&nbsp;</TD>
    <TD class=3DmdescRight>Destroys an AEXP object. <A=20
      =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#gb4c11d6b601c232ecc12c6873947bb80"></A><BR></TD></TR>
  <TR>
    <TD class=3DmemItemLeft vAlign=3Dtop noWrap =
align=3Dright>void&nbsp;</TD>
    <TD class=3DmemItemRight vAlign=3Dbottom><A class=3Del=20
      =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#g1aac22a8681f15cda7662071ab305bd5">AEXP_shutdown</A>=20
      (void)</TD></TR>
  <TR>
    <TD class=3DmdescLeft>&nbsp;</TD>
    <TD class=3DmdescRight>Frees miscellaneous resources allocated by =
the AEXP=20
      module. <A=20
      =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#g1aac22a8681f15cda7662071ab305bd5"></A><BR></TD></TR>
  <TR>
    <TD class=3DmemItemLeft vAlign=3Dtop noWrap =
align=3Dright>CDA_BOOL_t&nbsp;</TD>
    <TD class=3DmemItemRight vAlign=3Dbottom><A class=3Del=20
      =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#gfad628b1d5e59d0bebfed3655d25c664">AEXP_token_test</A>=20
      (CDA_BOOL_t print)</TD></TR>
  <TR>
    <TD class=3DmdescLeft>&nbsp;</TD>
    <TD class=3DmdescRight>Executes a diagnostic to validate=20
      implementation-specific facilities. <A=20
      =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#gfad628b1d5e59d0bebfed3655d25c664"></A><BR></TD></TR>
  <TR>
    <TD class=3DmemItemLeft vAlign=3Dtop noWrap =
align=3Dright>CDA_BOOL_t&nbsp;</TD>
    <TD class=3DmemItemRight vAlign=3Dbottom><A class=3Del=20
      =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#gb052512bd074de8bb077e401c64e00de">AEXP_parse_test</A>=20
      (CDA_BOOL_t print)</TD></TR>
  <TR>
    <TD class=3DmdescLeft>&nbsp;</TD>
    <TD class=3DmdescRight>Executes a minimal parsing diagnostic. <A=20
      =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#gb052512bd074de8bb077e401c64e00de"></A><BR></TD></TR>
  <TR>
    <TD class=3DmemItemLeft vAlign=3Dtop noWrap align=3Dright>const char =
*&nbsp;</TD>
    <TD class=3DmemItemRight vAlign=3Dbottom><A class=3Del=20
      =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#gc148b889aa779116911c86e22572ffde">AEXP_get_expr_str</A>=20
      (<A class=3Del=20
      =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#gb3ec6d5ac4331d543a03f69bf7ad6246">AEXP_ID_t</A>=20
      expr)</TD></TR>
  <TR>
    <TD class=3DmdescLeft>&nbsp;</TD>
    <TD class=3DmdescRight>Returns the original expression string used =
to create=20
      the expression object. <A=20
      =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#gc148b889aa779116911c86e22572ffde"></A><BR></TD></TR>
  <TR>
    <TD class=3DmemItemLeft vAlign=3Dtop noWrap =
align=3Dright>double&nbsp;</TD>
    <TD class=3DmemItemRight vAlign=3Dbottom><A class=3Del=20
      =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#gb3a1014070ae7634030764f3870fb04a">AEXP_get_result</A>=20
      (<A class=3Del=20
      =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#gb3ec6d5ac4331d543a03f69bf7ad6246">AEXP_ID_t</A>=20
      expr)</TD></TR>
  <TR>
    <TD class=3DmdescLeft>&nbsp;</TD>
    <TD class=3DmdescRight>Returns the result of the expression =
evaluation. <A=20
      =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#gb3a1014070ae7634030764f3870fb04a"></A><BR></TD></TR>
  <TR>
    <TD class=3DmemItemLeft vAlign=3Dtop noWrap align=3Dright>const char =
*&nbsp;</TD>
    <TD class=3DmemItemRight vAlign=3Dbottom><A class=3Del=20
      =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#ge85059baed9a0fcb8449d0189a7a2d39">AEXP_get_invalid_token</A>=20
      (<A class=3Del=20
      =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#gb3ec6d5ac4331d543a03f69bf7ad6246">AEXP_ID_t</A>=20
      expr, size_t *len)</TD></TR>
  <TR>
    <TD class=3DmdescLeft>&nbsp;</TD>
    <TD class=3DmdescRight>Returns a pointer to the start of a token in =
which a=20
      syntax error was encountered. <A=20
      =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#ge85059baed9a0fcb8449d0189a7a2d39"></A><BR></TD></TR>
  <TR>
    <TD class=3DmemItemLeft vAlign=3Dtop noWrap =
align=3Dright>CDA_BOOL_t&nbsp;</TD>
    <TD class=3DmemItemRight vAlign=3Dbottom><A class=3Del=20
      =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#g17a4d3dad890c128982a8c40ff423d34">AEXP_is_valid</A>=20
      (<A class=3Del=20
      =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#gb3ec6d5ac4331d543a03f69bf7ad6246">AEXP_ID_t</A>=20
      expr)</TD></TR>
  <TR>
    <TD class=3DmdescLeft>&nbsp;</TD>
    <TD class=3DmdescRight>Indicates whether an expression is =
syntactically=20
      valid. <A=20
      =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#g17a4d3dad890c128982a8c40ff423d34"></A><BR></TD></TR>
  <TR>
    <TD class=3DmemItemLeft vAlign=3Dtop noWrap =
align=3Dright>int&nbsp;</TD>
    <TD class=3DmemItemRight vAlign=3Dbottom><A class=3Del=20
      =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#g0f9943ab8b6fefa288055165273b3317">AEXP_get_errno</A>=20
      (<A class=3Del=20
      =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#gb3ec6d5ac4331d543a03f69bf7ad6246">AEXP_ID_t</A>=20
      expr)</TD></TR>
  <TR>
    <TD class=3DmdescLeft>&nbsp;</TD>
    <TD class=3DmdescRight>Returns the error number obtained from =
evaluating an=20
      expression. <A=20
      =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#g0f9943ab8b6fefa288055165273b3317"></A><BR></TD></TR></P></TBODY>=
</TABLE>
<HR>
<A name=3D_details></A>
<H2>Detailed Description</H2>Documentation for the public API of the =
Arithmetic=20
Expression (AEXP) module.=20
<P>
<HR>

<H2>Define Documentation</H2><A class=3Danchor=20
name=3Dgd00f1d271d3cb4a7076d61dfe03724d8></A><!-- doxytag: =
member=3D"aexp.h::AEXP_NULL_ID" =
ref=3D"gd00f1d271d3cb4a7076d61dfe03724d8" args=3D"" -->
<DIV class=3Dmemitem>
<DIV class=3Dmemproto>
<TABLE class=3Dmemname>
  <TBODY>
  <TR>
    <TD class=3Dmemname>#define AEXP_NULL_ID&nbsp;&nbsp;&nbsp;(NULL)=20
  </TD></TR></TBODY></TABLE></DIV>
<DIV class=3Dmemdoc>
<P>NULL-initializer for the AEXP_ID_t type.=20
<P>This macro should be treated as an <EM>opaque</EM> value. =
</P></DIV></DIV>
<P>
<HR>

<H2>Typedef Documentation</H2><A class=3Danchor=20
name=3Dgb3ec6d5ac4331d543a03f69bf7ad6246></A><!-- doxytag: =
member=3D"aexp.h::AEXP_ID_t" ref=3D"gb3ec6d5ac4331d543a03f69bf7ad6246" =
args=3D"" -->
<DIV class=3Dmemitem>
<DIV class=3Dmemproto>
<TABLE class=3Dmemname>
  <TBODY>
  <TR>
    <TD class=3Dmemname>typedef struct aexp__expr_s* <A class=3Del=20
      =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#gb3ec6d5ac4331d543a03f69bf7ad6246">AEXP_ID_t</A>=20
    </TD></TR></TBODY></TABLE></DIV>
<DIV class=3Dmemdoc>
<P>Type of the ID that represents an expression.=20
<P>In the context of this module, all arithmetic expressions are =
represented by=20
an object of this type.
<P>
<DL class=3Dsee compact>
  <DT><B>See also:</B>
  <DD><A class=3Del=20
  =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#g9a08929905036f46eb2619404cca618b">AEXP_create_expr</A>=20
  </DD></DL>
<DL compact>
  <DT><B>Examples: </B>
  <DD><A class=3Del=20
  =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/test_8c-e=
xample.html#a0">test.c</A>.</DD></DL></DIV></DIV>
<P>
<HR>

<H2>Function Documentation</H2><A class=3Danchor=20
name=3Dg9a08929905036f46eb2619404cca618b></A><!-- doxytag: =
member=3D"aexp.h::AEXP_create_expr" =
ref=3D"g9a08929905036f46eb2619404cca618b" args=3D"(const char *expr_str, =
size_t len)" -->
<DIV class=3Dmemitem>
<DIV class=3Dmemproto>
<TABLE class=3Dmemname>
  <TBODY>
  <TR>
    <TD class=3Dmemname><A class=3Del=20
      =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#gb3ec6d5ac4331d543a03f69bf7ad6246">AEXP_ID_t</A>=20
      AEXP_create_expr </TD>
    <TD>(</TD>
    <TD class=3Dparamtype>const char *&nbsp;</TD>
    <TD class=3Dparamname><EM>expr_str</EM>, </TD></TR>
  <TR>
    <TD class=3Dparamkey></TD>
    <TD></TD>
    <TD class=3Dparamtype>size_t&nbsp;</TD>
    <TD class=3Dparamname><EM>len</EM></TD>
    <TD>&nbsp;</TD></TR>
  <TR>
    <TD></TD>
    <TD>)</TD>
    <TD></TD>
    <TD></TD>
    <TD width=3D"100%"></TD></TR></TBODY></TABLE></DIV>
<DIV class=3Dmemdoc>
<P>Creates an object to represent an arithmetic expression.=20
<P>
<DL compact>
  <DT><B>Parameters:</B>
  <DD>
  <TABLE cellSpacing=3D2 cellPadding=3D0 border=3D0>
    <TBODY>
    <TR>
      <TD vAlign=3Dtop></TD>
      <TD vAlign=3Dtop><EM>expr_str</EM>&nbsp;</TD>
      <TD>an arithmetic expression represented as a string; need not be=20
        null-terminated </TD></TR>
    <TR>
      <TD vAlign=3Dtop></TD>
      <TD vAlign=3Dtop><EM>len</EM>&nbsp;</TD>
      <TD>the length of <EM>expr_str</EM> not including the =
null-terminator=20
        (if any) </TD></TR></TBODY></TABLE></DD></DL>
<DL class=3Dreturn compact>
  <DT><B>Returns:</B>
  <DD>the ID of an object representing the expression</DD></DL>This =
method creates=20
an object representing an arithmetic expression. The expression is =
constructed=20
by the caller using infix notation (e.g. 3 * 13 + 24). The expression =
string is=20
copied into the object, parsed, and evaluated (if possible). The caller =
may use=20
<A class=3Del=20
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#g17a4d3dad890c128982a8c40ff423d34">AEXP_is_valid</A>=20
to determine whether the submitted expression is valid, and <A =
class=3Del=20
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#g0f9943ab8b6fefa288055165273b3317">AEXP_get_errno</A>=20
to determine whether an error occurred during expression evaluation. =
When the=20
expression object is no longer needed it should be disposed by calling =
<A=20
class=3Del=20
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#gb4c11d6b601c232ecc12c6873947bb80">AEXP_destroy_expr</A>.
<P>
<DL class=3Dsee compact>
  <DT><B>See also:</B>
  <DD><A class=3Del=20
  =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#gb4c11d6b601c232ecc12c6873947bb80">AEXP_destroy_expr</A>,=20
  <A class=3Del=20
  =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#g17a4d3dad890c128982a8c40ff423d34">AEXP_is_valid</A>,=20
  <A class=3Del=20
  =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#g0f9943ab8b6fefa288055165273b3317">AEXP_get_errno</A></DD></DL><B=
>Example:</B>=20

<DIV class=3Dfragment><PRE class=3Dfragment> <SPAN =
class=3Dkeyword>static</SPAN> CDA_BOOL_t evaluate_expr( <SPAN =
class=3Dkeyword>const</SPAN> <SPAN class=3Dkeywordtype>char</SPAN> *str, =
size_t len )
 {
     CDA_BOOL_t  rcode   =3D CDA_FALSE;
     <A class=3Dcode =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#gb3ec6d5ac4331d543a03f69bf7ad6246">AEXP_ID_t</A>   expr    =3D =
<A class=3Dcode =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#g9a08929905036f46eb2619404cca618b">AEXP_create_expr</A>( str, =
len );
     CDA_BOOL_t  valid   =3D <A class=3Dcode =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#g17a4d3dad890c128982a8c40ff423d34">AEXP_is_valid</A>( expr );
     <SPAN class=3Dkeywordtype>int</SPAN>         errnum  =3D <A =
class=3Dcode =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#g0f9943ab8b6fefa288055165273b3317">AEXP_get_errno</A>( expr );
=20
     <SPAN class=3Dkeywordflow>if</SPAN> ( !valid )
         dump_bad_expr( expr );
     <SPAN class=3Dkeywordflow>else</SPAN> <SPAN =
class=3Dkeywordflow>if</SPAN> ( errnum !=3D 0 )
         dump_errno( expr );
     <SPAN class=3Dkeywordflow>else</SPAN>
     {
         <SPAN class=3Dkeywordtype>double</SPAN>  result  =3D <A =
class=3Dcode =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#gb3a1014070ae7634030764f3870fb04a">AEXP_get_result</A>( expr );
         printf( <SPAN class=3Dstringliteral>"\t%.*s =3D %g\n"</SPAN>, =
len, str, result );
         rcode =3D CDA_TRUE;
     }
=20
     <A class=3Dcode =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#gb4c11d6b601c232ecc12c6873947bb80">AEXP_destroy_expr</A>( expr =
);
     <SPAN class=3Dkeywordflow>return</SPAN> rcode;
 }
</PRE></DIV><B>Output:</B>=20
<DIV class=3Dfragment><PRE class=3Dfragment>     5 * 3 =3D 75
</PRE></DIV>
<DL compact>
  <DT><B>Examples: </B>
  <DD><A class=3Del=20
  =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/test_8c-e=
xample.html#a4">test.c</A>.</DD></DL></DIV></DIV>
<P><A class=3Danchor name=3Dgb4c11d6b601c232ecc12c6873947bb80></A><!-- =
doxytag: member=3D"aexp.h::AEXP_destroy_expr" =
ref=3D"gb4c11d6b601c232ecc12c6873947bb80" args=3D"(AEXP_ID_t expr)" -->
<DIV class=3Dmemitem>
<DIV class=3Dmemproto>
<TABLE class=3Dmemname>
  <TBODY>
  <TR>
    <TD class=3Dmemname><A class=3Del=20
      =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#gb3ec6d5ac4331d543a03f69bf7ad6246">AEXP_ID_t</A>=20
      AEXP_destroy_expr </TD>
    <TD>(</TD>
    <TD class=3Dparamtype><A class=3Del=20
      =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#gb3ec6d5ac4331d543a03f69bf7ad6246">AEXP_ID_t</A>&nbsp;</TD>
    <TD class=3Dparamname><EM>expr</EM> </TD>
    <TD>&nbsp;)&nbsp;</TD>
    <TD width=3D"100%"></TD></TR></TBODY></TABLE></DIV>
<DIV class=3Dmemdoc>
<P>Destroys an AEXP object.=20
<P>
<DL compact>
  <DT><B>Parameters:</B>
  <DD>
  <TABLE cellSpacing=3D2 cellPadding=3D0 border=3D0>
    <TBODY>
    <TR>
      <TD vAlign=3Dtop></TD>
      <TD vAlign=3Dtop><EM>expr</EM>&nbsp;</TD>
      <TD>the ID of the object to destroy =
</TD></TR></TBODY></TABLE></DD></DL>
<DL class=3Dreturn compact>
  <DT><B>Returns:</B>
  <DD>AEXP_NULL_ID</DD></DL>This method destroys an object previously =
created by=20
<A class=3Del=20
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#g9a08929905036f46eb2619404cca618b">AEXP_create_expr</A>.=20
The user may pass <A class=3Del=20
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#gd00f1d271d3cb4a7076d61dfe03724d8">AEXP_NULL_ID</A>,=20
in which case no action will be taken.
<P><B>Example:</B>=20
<DIV class=3Dfragment><PRE class=3Dfragment> <SPAN =
class=3Dkeyword>const</SPAN> <SPAN class=3Dkeywordtype>char</SPAN>  *str =
   =3D <SPAN class=3Dstringliteral>"10 * (5 + 4)"</SPAN>
 size_t      len     =3D strlen( str );
 <A class=3Dcode =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#gb3ec6d5ac4331d543a03f69bf7ad6246">AEXP_ID_t</A>   expr    =3D =
<A class=3Dcode =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#g9a08929905036f46eb2619404cca618b">AEXP_create_expr</A>( str, =
len );
 . . .
 expr =3D <A class=3Dcode =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#gb4c11d6b601c232ecc12c6873947bb80">AEXP_destroy_expr</A>( expr =
);
</PRE></DIV>
<DL compact>
  <DT><B>Examples: </B>
  <DD><A class=3Del=20
  =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/test_8c-e=
xample.html#a8">test.c</A>.</DD></DL></DIV></DIV>
<P><A class=3Danchor name=3Dg0f9943ab8b6fefa288055165273b3317></A><!-- =
doxytag: member=3D"aexp.h::AEXP_get_errno" =
ref=3D"g0f9943ab8b6fefa288055165273b3317" args=3D"(AEXP_ID_t expr)" -->
<DIV class=3Dmemitem>
<DIV class=3Dmemproto>
<TABLE class=3Dmemname>
  <TBODY>
  <TR>
    <TD class=3Dmemname>int AEXP_get_errno </TD>
    <TD>(</TD>
    <TD class=3Dparamtype><A class=3Del=20
      =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#gb3ec6d5ac4331d543a03f69bf7ad6246">AEXP_ID_t</A>&nbsp;</TD>
    <TD class=3Dparamname><EM>expr</EM> </TD>
    <TD>&nbsp;)&nbsp;</TD>
    <TD width=3D"100%"></TD></TR></TBODY></TABLE></DIV>
<DIV class=3Dmemdoc>
<P>Returns the error number obtained from evaluating an expression.=20
<P>
<DL compact>
  <DT><B>Parameters:</B>
  <DD>
  <TABLE cellSpacing=3D2 cellPadding=3D0 border=3D0>
    <TBODY>
    <TR>
      <TD vAlign=3Dtop></TD>
      <TD vAlign=3Dtop><EM>expr</EM>&nbsp;</TD>
      <TD>expression to interrogate </TD></TR></TBODY></TABLE></DD></DL>
<DL class=3Dreturn compact>
  <DT><B>Returns:</B>
  <DD>error number</DD></DL>The method will return the error number =
generated=20
during expression evaluation. The error number corresponds to the =
Standard C=20
errno facility. If no error was encountered the return value will be 0.
<P><B>Example:</B>=20
<DIV class=3Dfragment><PRE class=3Dfragment> <SPAN =
class=3Dkeyword>static</SPAN> <SPAN class=3Dkeywordtype>void</SPAN> =
dump_errno( <A class=3Dcode =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#gb3ec6d5ac4331d543a03f69bf7ad6246">AEXP_ID_t</A> expr )
 {
     <SPAN class=3Dkeyword>const</SPAN> <SPAN =
class=3Dkeywordtype>char</SPAN>  *expr_str   =3D <A class=3Dcode =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#gc148b889aa779116911c86e22572ffde">AEXP_get_expr_str</A>( expr =
);
     <SPAN class=3Dkeywordtype>int</SPAN>         errnum      =3D <A =
class=3Dcode =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#g0f9943ab8b6fefa288055165273b3317">AEXP_get_errno</A>( expr );
     <SPAN class=3Dkeyword>const</SPAN> <SPAN =
class=3Dkeywordtype>char</SPAN>  *err_str    =3D strerror( errnum );
     printf( <SPAN class=3Dstringliteral>"\t%s\n"</SPAN>, expr_str );
     printf( <SPAN class=3Dstringliteral>"\tArithmetic error: %d, =
\"%s\"\n"</SPAN>, errnum, err_str );
 }
</PRE></DIV>
<P>Output:=20
<DIV class=3Dfragment><PRE class=3Dfragment>    10 ** (10 ** 10)
    Arithmetic error: 34, <SPAN class=3Dstringliteral>"Result too =
large"</SPAN>
</PRE></DIV>
<DL compact>
  <DT><B>Examples: </B>
  <DD><A class=3Del=20
  =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/test_8c-e=
xample.html#a6">test.c</A>.</DD></DL></DIV></DIV>
<P><A class=3Danchor name=3Dgc148b889aa779116911c86e22572ffde></A><!-- =
doxytag: member=3D"aexp.h::AEXP_get_expr_str" =
ref=3D"gc148b889aa779116911c86e22572ffde" args=3D"(AEXP_ID_t expr)" -->
<DIV class=3Dmemitem>
<DIV class=3Dmemproto>
<TABLE class=3Dmemname>
  <TBODY>
  <TR>
    <TD class=3Dmemname>const char* AEXP_get_expr_str </TD>
    <TD>(</TD>
    <TD class=3Dparamtype><A class=3Del=20
      =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#gb3ec6d5ac4331d543a03f69bf7ad6246">AEXP_ID_t</A>&nbsp;</TD>
    <TD class=3Dparamname><EM>expr</EM> </TD>
    <TD>&nbsp;)&nbsp;</TD>
    <TD width=3D"100%"></TD></TR></TBODY></TABLE></DIV>
<DIV class=3Dmemdoc>
<P>Returns the original expression string used to create the expression =
object.=20
<P>
<DL compact>
  <DT><B>Parameters:</B>
  <DD>
  <TABLE cellSpacing=3D2 cellPadding=3D0 border=3D0>
    <TBODY>
    <TR>
      <TD vAlign=3Dtop></TD>
      <TD vAlign=3Dtop><EM>expr</EM>&nbsp;</TD>
      <TD>expression to interrogate </TD></TR></TBODY></TABLE></DD></DL>
<DL class=3Dreturn compact>
  <DT><B>Returns:</B>
  <DD>pointer to expression string</DD></DL>This method returns the =
expression=20
string embedded in the expression object. The string is null-terminated, =
even if=20
the string used to create the object was not.
<P>
<DL class=3Dsee compact>
  <DT><B>See also:</B>
  <DD><A class=3Del=20
  =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#g9a08929905036f46eb2619404cca618b">AEXP_create_expr</A>=20
  </DD></DL>
<DL compact>
  <DT><B>Examples: </B>
  <DD><A class=3Del=20
  =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/test_8c-e=
xample.html#a9">test.c</A>.</DD></DL></DIV></DIV>
<P><A class=3Danchor name=3Dge85059baed9a0fcb8449d0189a7a2d39></A><!-- =
doxytag: member=3D"aexp.h::AEXP_get_invalid_token" =
ref=3D"ge85059baed9a0fcb8449d0189a7a2d39" args=3D"(AEXP_ID_t expr, =
size_t *len)" -->
<DIV class=3Dmemitem>
<DIV class=3Dmemproto>
<TABLE class=3Dmemname>
  <TBODY>
  <TR>
    <TD class=3Dmemname>const char* AEXP_get_invalid_token </TD>
    <TD>(</TD>
    <TD class=3Dparamtype><A class=3Del=20
      =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#gb3ec6d5ac4331d543a03f69bf7ad6246">AEXP_ID_t</A>&nbsp;</TD>
    <TD class=3Dparamname><EM>expr</EM>, </TD></TR>
  <TR>
    <TD class=3Dparamkey></TD>
    <TD></TD>
    <TD class=3Dparamtype>size_t *&nbsp;</TD>
    <TD class=3Dparamname><EM>len</EM></TD>
    <TD>&nbsp;</TD></TR>
  <TR>
    <TD></TD>
    <TD>)</TD>
    <TD></TD>
    <TD></TD>
    <TD width=3D"100%"></TD></TR></TBODY></TABLE></DIV>
<DIV class=3Dmemdoc>
<P>Returns a pointer to the start of a token in which a syntax error was =

encountered.=20
<P>
<DL compact>
  <DT><B>Parameters:</B>
  <DD>
  <TABLE cellSpacing=3D2 cellPadding=3D0 border=3D0>
    <TBODY>
    <TR>
      <TD vAlign=3Dtop></TD>
      <TD vAlign=3Dtop><EM>expr</EM>&nbsp;</TD>
      <TD>expression to interrogate </TD></TR>
    <TR>
      <TD vAlign=3Dtop></TD>
      <TD vAlign=3Dtop><EM>len</EM>&nbsp;</TD>
      <TD>used to return string length; may be NULL=20
</TD></TR></TBODY></TABLE></DD></DL>
<DL class=3Dreturn compact>
  <DT><B>Returns:</B>
  <DD>pointer to token</DD></DL>This method returns a pointer to a token =
inside a=20
syntactically invalid expression string. The token will be the token =
being=20
parsed when when the syntax error was detected, however it is possible =
that the=20
syntax error was initiated earlier in the string. The length of the =
string is=20
returned via parameter <EM>len</EM>; the parameter may be NULL, in which =
case it=20
is ignored.
<P>
<DL class=3Dsee compact>
  <DT><B>See also:</B>
  <DD><A class=3Del=20
  =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#g17a4d3dad890c128982a8c40ff423d34">AEXP_is_valid</A></DD></DL><B>=
Example:</B>=20

<DIV class=3Dfragment><PRE class=3Dfragment> <SPAN =
class=3Dkeyword>static</SPAN> <SPAN class=3Dkeywordtype>void</SPAN> =
dump_bad_expr( <A class=3Dcode =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#gb3ec6d5ac4331d543a03f69bf7ad6246">AEXP_ID_t</A> expr )
 {
     <SPAN class=3Dkeyword>const</SPAN> <SPAN =
class=3Dkeywordtype>char</SPAN>  *str        =3D <A class=3Dcode =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#gc148b889aa779116911c86e22572ffde">AEXP_get_expr_str</A>( expr =
);
     <SPAN class=3Dkeyword>const</SPAN> <SPAN =
class=3Dkeywordtype>char</SPAN>  *bad_str    =3D <A class=3Dcode =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#ge85059baed9a0fcb8449d0189a7a2d39">AEXP_get_invalid_token</A>( =
expr, NULL );
     ptrdiff_t   pos         =3D bad_str - str;
     ptrdiff_t   inx         =3D 0;
=20
     printf( <SPAN class=3Dstringliteral>"\tInvalid =
expression:\n"</SPAN> );
     printf( <SPAN class=3Dstringliteral>"\t%s\n\t"</SPAN>, str );
     <SPAN class=3Dkeywordflow>for</SPAN> ( inx =3D 0 ; inx &lt; pos ; =
++inx )
         putchar( <SPAN class=3Dcharliteral>' '</SPAN> );
     puts( <SPAN class=3Dstringliteral>"^"</SPAN> );
 }
</PRE></DIV>Output:=20
<DIV class=3Dfragment><PRE class=3Dfragment>    Invalid expression:
    3 + (5 ** pii)
              ^
</PRE></DIV>
<DL compact>
  <DT><B>Examples: </B>
  <DD><A class=3Del=20
  =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/test_8c-e=
xample.html#a10">test.c</A>.</DD></DL></DIV></DIV>
<P><A class=3Danchor name=3Dgb3a1014070ae7634030764f3870fb04a></A><!-- =
doxytag: member=3D"aexp.h::AEXP_get_result" =
ref=3D"gb3a1014070ae7634030764f3870fb04a" args=3D"(AEXP_ID_t expr)" -->
<DIV class=3Dmemitem>
<DIV class=3Dmemproto>
<TABLE class=3Dmemname>
  <TBODY>
  <TR>
    <TD class=3Dmemname>double AEXP_get_result </TD>
    <TD>(</TD>
    <TD class=3Dparamtype><A class=3Del=20
      =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#gb3ec6d5ac4331d543a03f69bf7ad6246">AEXP_ID_t</A>&nbsp;</TD>
    <TD class=3Dparamname><EM>expr</EM> </TD>
    <TD>&nbsp;)&nbsp;</TD>
    <TD width=3D"100%"></TD></TR></TBODY></TABLE></DIV>
<DIV class=3Dmemdoc>
<P>Returns the result of the expression evaluation.=20
<P>
<DL compact>
  <DT><B>Parameters:</B>
  <DD>
  <TABLE cellSpacing=3D2 cellPadding=3D0 border=3D0>
    <TBODY>
    <TR>
      <TD vAlign=3Dtop></TD>
      <TD vAlign=3Dtop><EM>expr</EM>&nbsp;</TD>
      <TD>expression to interrogate </TD></TR></TBODY></TABLE></DD></DL>
<DL class=3Dreturn compact>
  <DT><B>Returns:</B>
  <DD>expression value</DD></DL>This method returns the value of the =
expression=20
embedded in the object, assuming the expression is syntactically valid, =
and no=20
arithmetic exceptions were encountered during evaluation.
<P>
<DL class=3Dsee compact>
  <DT><B>See also:</B>
  <DD><A class=3Del=20
  =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#g17a4d3dad890c128982a8c40ff423d34">AEXP_is_valid</A>,=20
  <A class=3Del=20
  =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#g0f9943ab8b6fefa288055165273b3317">AEXP_get_errno</A>=20
  </DD></DL>
<DL compact>
  <DT><B>Examples: </B>
  <DD><A class=3Del=20
  =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/test_8c-e=
xample.html#a7">test.c</A>.</DD></DL></DIV></DIV>
<P><A class=3Danchor name=3Dg17a4d3dad890c128982a8c40ff423d34></A><!-- =
doxytag: member=3D"aexp.h::AEXP_is_valid" =
ref=3D"g17a4d3dad890c128982a8c40ff423d34" args=3D"(AEXP_ID_t expr)" -->
<DIV class=3Dmemitem>
<DIV class=3Dmemproto>
<TABLE class=3Dmemname>
  <TBODY>
  <TR>
    <TD class=3Dmemname>CDA_BOOL_t AEXP_is_valid </TD>
    <TD>(</TD>
    <TD class=3Dparamtype><A class=3Del=20
      =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#gb3ec6d5ac4331d543a03f69bf7ad6246">AEXP_ID_t</A>&nbsp;</TD>
    <TD class=3Dparamname><EM>expr</EM> </TD>
    <TD>&nbsp;)&nbsp;</TD>
    <TD width=3D"100%"></TD></TR></TBODY></TABLE></DIV>
<DIV class=3Dmemdoc>
<P>Indicates whether an expression is syntactically valid.=20
<P>
<DL compact>
  <DT><B>Parameters:</B>
  <DD>
  <TABLE cellSpacing=3D2 cellPadding=3D0 border=3D0>
    <TBODY>
    <TR>
      <TD vAlign=3Dtop></TD>
      <TD vAlign=3Dtop><EM>expr</EM>&nbsp;</TD>
      <TD>expression to interrogate </TD></TR></TBODY></TABLE></DD></DL>
<DL class=3Dreturn compact>
  <DT><B>Returns:</B>
  <DD>CDA_TRUE if expression is valid, CDA_FALSE otherwise</DD></DL>This =
method=20
returns a Boolean value indicating whether or not an expression is =
syntactically=20
valid.
<P>
<DL class=3Dsee compact>
  <DT><B>See also:</B>
  <DD><A class=3Del=20
  =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#ge85059baed9a0fcb8449d0189a7a2d39">AEXP_get_invalid_token</A>,=20
  <A class=3Del=20
  =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#g0f9943ab8b6fefa288055165273b3317">AEXP_get_errno</A>=20
  </DD></DL>
<DL compact>
  <DT><B>Examples: </B>
  <DD><A class=3Del=20
  =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/test_8c-e=
xample.html#a5">test.c</A>.</DD></DL></DIV></DIV>
<P><A class=3Danchor name=3Dgb052512bd074de8bb077e401c64e00de></A><!-- =
doxytag: member=3D"aexp.h::AEXP_parse_test" =
ref=3D"gb052512bd074de8bb077e401c64e00de" args=3D"(CDA_BOOL_t print)" =
-->
<DIV class=3Dmemitem>
<DIV class=3Dmemproto>
<TABLE class=3Dmemname>
  <TBODY>
  <TR>
    <TD class=3Dmemname>CDA_BOOL_t AEXP_parse_test </TD>
    <TD>(</TD>
    <TD class=3Dparamtype>CDA_BOOL_t&nbsp;</TD>
    <TD class=3Dparamname><EM>print</EM> </TD>
    <TD>&nbsp;)&nbsp;</TD>
    <TD width=3D"100%"></TD></TR></TBODY></TABLE></DIV>
<DIV class=3Dmemdoc>
<P>Executes a minimal parsing diagnostic.=20
<P>
<DL compact>
  <DT><B>Parameters:</B>
  <DD>
  <TABLE cellSpacing=3D2 cellPadding=3D0 border=3D0>
    <TBODY>
    <TR>
      <TD vAlign=3Dtop></TD>
      <TD vAlign=3Dtop><EM>print</EM>&nbsp;</TD>
      <TD>if set to CDA_TRUE, the diagnostic will dump results to stdout =

    </TD></TR></TBODY></TABLE></DD></DL>
<DL class=3Dreturn compact>
  <DT><B>Returns:</B>
  <DD>CDA_TRUE if diagnostic is successful, CDA_FALSE =
otherwise.</DD></DL>This=20
facility executes a minimal diagnostic to test the module's parsing =
logic. It is=20
<EM>not</EM> exhaustive. Its main utility is to provide a means for =
diagnosing=20
problems detected by an external test program. The method is public so =
that it=20
can be called from a black-box test program; as a rule, such a program =
should=20
verify that the diagnostic passes before proceeding with an exhaustive =
test.
<P>
<DL class=3Dsee compact>
  <DT><B>See also:</B>
  <DD><A class=3Del=20
  =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#gfad628b1d5e59d0bebfed3655d25c664">AEXP_token_test</A>=20
  </DD></DL>
<DL compact>
  <DT><B>Examples: </B>
  <DD><A class=3Del=20
  =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/test_8c-e=
xample.html#a2">test.c</A>.</DD></DL></DIV></DIV>
<P><A class=3Danchor name=3Dg1aac22a8681f15cda7662071ab305bd5></A><!-- =
doxytag: member=3D"aexp.h::AEXP_shutdown" =
ref=3D"g1aac22a8681f15cda7662071ab305bd5" args=3D"(void)" -->
<DIV class=3Dmemitem>
<DIV class=3Dmemproto>
<TABLE class=3Dmemname>
  <TBODY>
  <TR>
    <TD class=3Dmemname>void AEXP_shutdown </TD>
    <TD>(</TD>
    <TD class=3Dparamtype>void&nbsp;</TD>
    <TD class=3Dparamname></TD>
    <TD>&nbsp;)&nbsp;</TD>
    <TD width=3D"100%"></TD></TR></TBODY></TABLE></DIV>
<DIV class=3Dmemdoc>
<P>Frees miscellaneous resources allocated by the AEXP module.=20
<P>The AEXP module allocates miscellaneous resources for global use =
during=20
processing. Calling this method will free those resources (note: this =
method=20
does not destroy any AEXP object instances; the user should destroy all =
such=20
instances by calling AEXP_destroy_expr). It is generally not necessary =
to call=20
this method. However resource monitors (such as testing tools that look =
for heap=20
leaks) will identify the module's outstanding allocations as possible =
leaks;=20
disposing of such allocations prior to program termination will =
eliminate such=20
warnings.=20
<DL compact>
  <DT><B>Examples: </B>
  <DD><A class=3Del=20
  =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/test_8c-e=
xample.html#a3">test.c</A>.</DD></DL></DIV></DIV>
<P><A class=3Danchor name=3Dgfad628b1d5e59d0bebfed3655d25c664></A><!-- =
doxytag: member=3D"aexp.h::AEXP_token_test" =
ref=3D"gfad628b1d5e59d0bebfed3655d25c664" args=3D"(CDA_BOOL_t print)" =
-->
<DIV class=3Dmemitem>
<DIV class=3Dmemproto>
<TABLE class=3Dmemname>
  <TBODY>
  <TR>
    <TD class=3Dmemname>CDA_BOOL_t AEXP_token_test </TD>
    <TD>(</TD>
    <TD class=3Dparamtype>CDA_BOOL_t&nbsp;</TD>
    <TD class=3Dparamname><EM>print</EM> </TD>
    <TD>&nbsp;)&nbsp;</TD>
    <TD width=3D"100%"></TD></TR></TBODY></TABLE></DIV>
<DIV class=3Dmemdoc>
<P>Executes a diagnostic to validate implementation-specific facilities. =

<P>
<DL compact>
  <DT><B>Parameters:</B>
  <DD>
  <TABLE cellSpacing=3D2 cellPadding=3D0 border=3D0>
    <TBODY>
    <TR>
      <TD vAlign=3Dtop></TD>
      <TD vAlign=3Dtop><EM>print</EM>&nbsp;</TD>
      <TD>if set to CDA_TRUE, the diagnostic will dump results to stdout =

    </TD></TR></TBODY></TABLE></DD></DL>
<DL class=3Dreturn compact>
  <DT><B>Returns:</B>
  <DD>CDA_TRUE if diagnostic is successful, CDA_FALSE =
otherwise.</DD></DL>The AEXP=20
module maintains internal tables used to parse tokens from an expression =
string.=20
This method validates the integrity of those tables. The method is =
public so=20
that it can be called from a black-box test program; as a rule, such a =
program=20
should verify that the diagnostic passes before proceeding with an =
exhaustive=20
test.
<P>
<DL class=3Dsee compact>
  <DT><B>See also:</B>
  <DD><A class=3Del=20
  =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/group__ae=
xp.html#gb052512bd074de8bb077e401c64e00de">AEXP_parse_test</A>=20
  </DD></DL>
<DL compact>
  <DT><B>Examples: </B>
  <DD><A class=3Del=20
  =
href=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/test_8c-e=
xample.html#a1">test.c</A>.</DD></DL></DIV></DIV>
<P>
<HR SIZE=3D1>

<ADDRESS style=3D"align: right"><SMALL>Generated on Wed Jan 3 18:56:46 =
2007 for=20
AEXP by&nbsp; <A href=3D"http://www.doxygen.org/index.html"><IMG =
alt=3Ddoxygen=20
src=3D"http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/doxygen.pn=
g"=20
align=3Dmiddle border=3D0></A> 1.5.1-p1 </SMALL></ADDRESS></BODY></HTML>

------=_NextPart_000_0077_01C81100.9C3F5E90
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/doxygen.png

iVBORw0KGgoAAAANSUhEUgAAAGQAAAAtCAMAAABvaz7CAAAABGdBTUEAANbY1E9YMgAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAABdUExURQAAAMe+zyImqcjO77a71tPa+pOi
3qCs4LbC9X+Hp9XZ6snKzuHi5nuO1I2h64iZ16Cy+KesucDAsd3dzvn56fX15+vr5UVEOdfWy2hn
XR8dE19YPEA6I21oVf///93AfzEAAAAfdFJOU///////////////////////////////////////
/wDNGXYQAAAD/0lEQVR42mKQQwAGCJCjOgAIIGQjGYSEhYWFaGAJQAChWCIsKioqTANLAAKILpYA
BBBdLAEIILpYAhBAdLEEIIDoYglAANHFEoAAQrVEhDaWAAQQmiUiIrSwBCCAGJALFJglDAyIEgaZ
QhQ6SKKIsgjBZkCVAAggiFJQeQIEIhBLYFxQEQNiQyghSQZJIWipAxGF64MogfGEkMQh6gECiAGs
QwQBhBnEheBsITBbWFxKXBgkA1QIDk0GiCiSPmEGJFOEGJAMBNkCEEAM0KhAUi4kgqwETEpCAlIY
oolBEMwQRzEKrAsWGMIoRsgBBBCDHNRQaGjBVMADD6IZhCUhHmCAJhBxsCUQdcIMUAcguQaiC6wB
IIAYILlDVAgYJEKi4HyCwgW6VxQChKQYwGygoyESQmBSBiQoDBYDhRnECIiRksIQnhxAAEHFJcQZ
GKTEJUAsBiiXAcoVgtoBEgKxJSTB4uJSElBtQiBVYDFJiFlCDAgVIDk5gABcjTECACAIAnlDQxJD
/39mIltOoCcA3D1UR8iS+GwFOJheS/s1jzzqElOB5lLJpJQl7hNAQAEeIOAGm8oNYjGgccVBFA+P
EFhIiAcCuIEmgdhCklIgeQkGbpgEUIQBzOOWAhsANEEOIICAarmAgBscPtwgFgOYC3QhmCsoLsjF
BVcBUQISBrFBMtzcEE0QVdyCkpKCguIMYDGgJWAxBjmAAAJGPAszEAgCY1oQxGAB8wVlIVwWiCBE
BcgrEC4LODOLs8DkuCFsFllZQSAtCDaCRUqKBaJWDiCAQKmeAwRYWFggNIQP5QrKQDgQNtBgGQgT
UmQIQrSANEkJIhQC3QkigZZAeHIAAQTKjIIcSICdQRrKEhAQYJdmBwnJyLBDjAYGIlgAVjDJCLKz
QwxiQDKFnQGsSAqsFsiTAwggcCkhKAAH7IIgnTCONAOIKSglBVLBzgm2BCSAVADKgKXA/mKHGwFi
gSwBcxnkAALQQAY3AMAgCPzRsILS7j9mpdaXXFBJeCFJtA+mIpSNyIiSM6gKUVmY/3SBXl7b2Gd2
LSB9PlcAgUpPQVYEYAQDJCYjlAWmBBk4+fj4OBmAXEZGIJtTRkoGJMLGgNDGitAPoRjkAAKIgYGJ
FMDACzQSqoUByOTlBQkALcGnhwEggBhIsoWBl5+fnxdmCT8c8OI1hAEggBiQazHCAGSJLIzDCbOD
k4AugAAirUYHmcvLgODxgr3BScgQgAAisdkANBfJSKBneIF8gmYABBCpbRMpKSk5tC4NYU0AAUSD
BhAmAAggulgCEEB0sQQggOhiCUAA0cUSgACiiyUAAUQXSwACiC6WAAQQXSwBCCC6WAIQQHSxBCCA
6GIJQIABAGRggsm9U7VPAAAAAElFTkSuQmCC

------=_NextPart_000_0077_01C81100.9C3F5E90
Content-Type: text/css;
	charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/doxygen.css

BODY {
	FONT-FAMILY: Geneva, Arial, Helvetica, sans-serif
}
H1 {
	FONT-FAMILY: Geneva, Arial, Helvetica, sans-serif
}
H2 {
	FONT-FAMILY: Geneva, Arial, Helvetica, sans-serif
}
H3 {
	FONT-FAMILY: Geneva, Arial, Helvetica, sans-serif
}
H4 {
	FONT-FAMILY: Geneva, Arial, Helvetica, sans-serif
}
H5 {
	FONT-FAMILY: Geneva, Arial, Helvetica, sans-serif
}
H6 {
	FONT-FAMILY: Geneva, Arial, Helvetica, sans-serif
}
P {
	FONT-FAMILY: Geneva, Arial, Helvetica, sans-serif
}
CENTER {
	FONT-FAMILY: Geneva, Arial, Helvetica, sans-serif
}
TD {
	FONT-FAMILY: Geneva, Arial, Helvetica, sans-serif
}
TH {
	FONT-FAMILY: Geneva, Arial, Helvetica, sans-serif
}
UL {
	FONT-FAMILY: Geneva, Arial, Helvetica, sans-serif
}
DL {
	FONT-FAMILY: Geneva, Arial, Helvetica, sans-serif
}
DIV {
	FONT-FAMILY: Geneva, Arial, Helvetica, sans-serif
}
BODY {
	FONT-SIZE: 90%
}
TD {
	FONT-SIZE: 90%
}
H1 {
	FONT-SIZE: 160%; TEXT-ALIGN: center
}
H2 {
	FONT-SIZE: 120%
}
H3 {
	FONT-SIZE: 100%
}
CAPTION {
	FONT-WEIGHT: bold
}
DIV.qindex {
	BORDER-RIGHT: #84b0c7 1px solid; PADDING-RIGHT: 2px; BORDER-TOP: =
#84b0c7 1px solid; PADDING-LEFT: 2px; PADDING-BOTTOM: 2px; MARGIN: 2px; =
BORDER-LEFT: #84b0c7 1px solid; WIDTH: 100%; LINE-HEIGHT: 140%; =
PADDING-TOP: 2px; BORDER-BOTTOM: #84b0c7 1px solid; BACKGROUND-COLOR: =
#e8eef2; TEXT-ALIGN: center
}
DIV.nav {
	BORDER-RIGHT: #84b0c7 1px solid; PADDING-RIGHT: 2px; BORDER-TOP: =
#84b0c7 1px solid; PADDING-LEFT: 2px; PADDING-BOTTOM: 2px; MARGIN: 2px; =
BORDER-LEFT: #84b0c7 1px solid; WIDTH: 100%; LINE-HEIGHT: 140%; =
PADDING-TOP: 2px; BORDER-BOTTOM: #84b0c7 1px solid; BACKGROUND-COLOR: =
#e8eef2; TEXT-ALIGN: center
}
DIV.navtab {
	BORDER-RIGHT: #84b0c7 1px solid; PADDING-RIGHT: 2px; BORDER-TOP: =
#84b0c7 1px solid; PADDING-LEFT: 2px; PADDING-BOTTOM: 2px; MARGIN: 2px =
15px 2px 2px; BORDER-LEFT: #84b0c7 1px solid; PADDING-TOP: 2px; =
BORDER-BOTTOM: #84b0c7 1px solid; BACKGROUND-COLOR: #e8eef2; TEXT-ALIGN: =
center
}
TD.navtab {
	FONT-SIZE: 70%
}
A.qindex {
	FONT-WEIGHT: bold; COLOR: #1a419d; TEXT-DECORATION: none
}
A.qindex:visited {
	FONT-WEIGHT: bold; COLOR: #1a419d; TEXT-DECORATION: none
}
A.qindex:hover {
	BACKGROUND-COLOR: #ddddff; TEXT-DECORATION: none
}
A.qindexHL {
	BORDER-RIGHT: #9295c2 1px double; BORDER-TOP: #9295c2 1px double; =
FONT-WEIGHT: bold; BORDER-LEFT: #9295c2 1px double; COLOR: #ffffff; =
BORDER-BOTTOM: #9295c2 1px double; BACKGROUND-COLOR: #6666cc; =
TEXT-DECORATION: none
}
A.qindexHL:hover {
	COLOR: #ffffff; BACKGROUND-COLOR: #6666cc; TEXT-DECORATION: none
}
A.qindexHL:visited {
	COLOR: #ffffff; BACKGROUND-COLOR: #6666cc; TEXT-DECORATION: none
}
A.el {
	FONT-WEIGHT: bold; TEXT-DECORATION: none
}
A.elRef {
	FONT-WEIGHT: bold
}
A.code:link {
	FONT-WEIGHT: normal; COLOR: #0000ff; TEXT-DECORATION: none
}
A.code:visited {
	FONT-WEIGHT: normal; COLOR: #0000ff; TEXT-DECORATION: none
}
A.codeRef:link {
	FONT-WEIGHT: normal; COLOR: #0000ff
}
A.codeRef:visited {
	FONT-WEIGHT: normal; COLOR: #0000ff
}
A:hover {
	BACKGROUND-COLOR: #f2f2ff; TEXT-DECORATION: none
}
DL.el {
	MARGIN-LEFT: -1cm
}
.fragment {
	FONT-SIZE: 95%; FONT-FAMILY: monospace, fixed
}
PRE.fragment {
	BORDER-RIGHT: #cccccc 1px solid; PADDING-RIGHT: 6px; BORDER-TOP: =
#cccccc 1px solid; PADDING-LEFT: 6px; PADDING-BOTTOM: 4px; MARGIN: 4px =
8px 4px 2px; BORDER-LEFT: #cccccc 1px solid; PADDING-TOP: 4px; =
BORDER-BOTTOM: #cccccc 1px solid; BACKGROUND-COLOR: #f5f5f5
}
DIV.ah {
	MARGIN-TOP: 3px; FONT-WEIGHT: bold; MARGIN-BOTTOM: 3px; COLOR: #ffffff; =
BACKGROUND-COLOR: black
}
DIV.groupHeader {
	MARGIN-TOP: 12px; FONT-WEIGHT: bold; MARGIN-BOTTOM: 6px; MARGIN-LEFT: =
16px
}
DIV.groupText {
	FONT-SIZE: 90%; MARGIN-LEFT: 16px; FONT-STYLE: italic
}
BODY {
	BACKGROUND: white; MARGIN-LEFT: 20px; COLOR: black; MARGIN-RIGHT: 20px
}
TD.indexkey {
	BORDER-RIGHT: #cccccc 1px solid; PADDING-RIGHT: 10px; BORDER-TOP: =
#cccccc 1px solid; PADDING-LEFT: 10px; FONT-WEIGHT: bold; =
PADDING-BOTTOM: 2px; MARGIN: 2px 0px; BORDER-LEFT: #cccccc 1px solid; =
PADDING-TOP: 2px; BORDER-BOTTOM: #cccccc 1px solid; BACKGROUND-COLOR: =
#e8eef2
}
TD.indexvalue {
	BORDER-RIGHT: #cccccc 1px solid; PADDING-RIGHT: 10px; BORDER-TOP: =
#cccccc 1px solid; PADDING-LEFT: 10px; PADDING-BOTTOM: 2px; MARGIN: 2px =
0px; BORDER-LEFT: #cccccc 1px solid; PADDING-TOP: 2px; BORDER-BOTTOM: =
#cccccc 1px solid; FONT-STYLE: italic; BACKGROUND-COLOR: #e8eef2
}
TR.memlist {
	BACKGROUND-COLOR: #f0f0f0
}
P.formulaDsp {
	TEXT-ALIGN: center
}
IMG.formulaDsp {
=09
}
IMG.formulaInl {
	VERTICAL-ALIGN: middle
}
SPAN.keyword {
	COLOR: #008000
}
SPAN.keywordtype {
	COLOR: #604020
}
SPAN.keywordflow {
	COLOR: #e08000
}
SPAN.comment {
	COLOR: #800000
}
SPAN.preprocessor {
	COLOR: #806020
}
SPAN.stringliteral {
	COLOR: #002080
}
SPAN.charliteral {
	COLOR: #008080
}
.mdescLeft {
	BORDER-RIGHT: #e0e0e0 1px; PADDING-RIGHT: 8px; BORDER-TOP: #e0e0e0 1px; =
PADDING-LEFT: 8px; FONT-SIZE: 80%; PADDING-BOTTOM: 4px; MARGIN: 0px; =
BORDER-LEFT: #e0e0e0 1px; PADDING-TOP: 0px; BORDER-BOTTOM: #e0e0e0 1px; =
FONT-STYLE: italic; BACKGROUND-COLOR: #fafafa
}
.mdescRight {
	BORDER-RIGHT: #e0e0e0 1px; PADDING-RIGHT: 8px; BORDER-TOP: #e0e0e0 1px; =
PADDING-LEFT: 8px; FONT-SIZE: 80%; PADDING-BOTTOM: 4px; MARGIN: 0px; =
BORDER-LEFT: #e0e0e0 1px; PADDING-TOP: 0px; BORDER-BOTTOM: #e0e0e0 1px; =
FONT-STYLE: italic; BACKGROUND-COLOR: #fafafa
}
.memItemLeft {
	BORDER-RIGHT: #e0e0e0 1px; PADDING-RIGHT: 0px; BORDER-TOP: #e0e0e0 1px =
solid; PADDING-LEFT: 8px; FONT-SIZE: 80%; PADDING-BOTTOM: 0px; MARGIN: =
4px; BORDER-LEFT: #e0e0e0 1px; PADDING-TOP: 1px; BORDER-BOTTOM: #e0e0e0 =
1px; BACKGROUND-COLOR: #fafafa
}
.memItemRight {
	BORDER-RIGHT: #e0e0e0 1px; PADDING-RIGHT: 8px; BORDER-TOP: #e0e0e0 1px =
solid; PADDING-LEFT: 8px; FONT-SIZE: 80%; PADDING-BOTTOM: 0px; MARGIN: =
4px; BORDER-LEFT: #e0e0e0 1px; PADDING-TOP: 1px; BORDER-BOTTOM: #e0e0e0 =
1px; BACKGROUND-COLOR: #fafafa
}
.memTemplItemLeft {
	BORDER-RIGHT: #e0e0e0 1px; PADDING-RIGHT: 0px; BORDER-TOP: #e0e0e0 1px; =
PADDING-LEFT: 8px; FONT-SIZE: 80%; PADDING-BOTTOM: 0px; MARGIN: 4px; =
BORDER-LEFT: #e0e0e0 1px; PADDING-TOP: 1px; BORDER-BOTTOM: #e0e0e0 1px; =
BACKGROUND-COLOR: #fafafa
}
.memTemplItemRight {
	BORDER-RIGHT: #e0e0e0 1px; PADDING-RIGHT: 8px; BORDER-TOP: #e0e0e0 1px; =
PADDING-LEFT: 8px; FONT-SIZE: 80%; PADDING-BOTTOM: 0px; MARGIN: 4px; =
BORDER-LEFT: #e0e0e0 1px; PADDING-TOP: 1px; BORDER-BOTTOM: #e0e0e0 1px; =
BACKGROUND-COLOR: #fafafa
}
.memTemplParams {
	BORDER-RIGHT: #e0e0e0 1px; PADDING-RIGHT: 0px; BORDER-TOP: #e0e0e0 1px =
solid; PADDING-LEFT: 8px; FONT-SIZE: 80%; PADDING-BOTTOM: 0px; MARGIN: =
4px; BORDER-LEFT: #e0e0e0 1px; COLOR: #606060; PADDING-TOP: 1px; =
BORDER-BOTTOM: #e0e0e0 1px; BACKGROUND-COLOR: #fafafa
}
.search {
	FONT-WEIGHT: bold; COLOR: #003399
}
FORM.search {
	MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px
}
INPUT.search {
	FONT-WEIGHT: normal; FONT-SIZE: 75%; COLOR: #000080; BACKGROUND-COLOR: =
#e8eef2
}
TD.tiny {
	FONT-SIZE: 75%
}
A {
	COLOR: #1a41a8
}
A:visited {
	COLOR: #2a3798
}
.dirtab {
	BORDER-RIGHT: #84b0c7 1px solid; PADDING-RIGHT: 4px; BORDER-TOP: =
#84b0c7 1px solid; PADDING-LEFT: 4px; PADDING-BOTTOM: 4px; BORDER-LEFT: =
#84b0c7 1px solid; PADDING-TOP: 4px; BORDER-BOTTOM: #84b0c7 1px solid; =
BORDER-COLLAPSE: collapse
}
TH.dirtab {
	FONT-WEIGHT: bold; BACKGROUND: #e8eef2
}
HR {
	BORDER-RIGHT: medium none; BORDER-TOP: black 1px solid; BORDER-LEFT: =
medium none; BORDER-BOTTOM: medium none; HEIGHT: 1px
}
.memtemplate {
	FONT-WEIGHT: normal; FONT-SIZE: 80%; COLOR: #606060
}
.memnav {
	BORDER-RIGHT: #84b0c7 1px solid; PADDING-RIGHT: 2px; BORDER-TOP: =
#84b0c7 1px solid; PADDING-LEFT: 2px; PADDING-BOTTOM: 2px; MARGIN: 2px =
15px 2px 2px; BORDER-LEFT: #84b0c7 1px solid; PADDING-TOP: 2px; =
BORDER-BOTTOM: #84b0c7 1px solid; BACKGROUND-COLOR: #e8eef2; TEXT-ALIGN: =
center
}
.memitem {
	BORDER-RIGHT: #dedeee 1px solid; PADDING-RIGHT: 4px; BORDER-TOP: =
#dedeee 1px solid; PADDING-LEFT: 4px; PADDING-BOTTOM: 4px; BORDER-LEFT: =
#dedeee 1px solid; PADDING-TOP: 4px; BORDER-BOTTOM: #dedeee 1px solid; =
BACKGROUND-COLOR: #eef3f5; -moz-border-radius: 8px 8px 8px 8px
}
.memname {
	FONT-WEIGHT: bold; WHITE-SPACE: nowrap
}
.memdoc {
	PADDING-LEFT: 10px
}
.memproto {
	BORDER-RIGHT: #84b0c7 1px solid; BORDER-TOP: #84b0c7 1px solid; =
FONT-WEIGHT: bold; BORDER-LEFT: #84b0c7 1px solid; WIDTH: 100%; =
BORDER-BOTTOM: #84b0c7 1px solid; BACKGROUND-COLOR: #d5e1e8; =
-moz-border-radius: 8px 8px 8px 8px
}
.paramkey {
	TEXT-ALIGN: right
}
.paramtype {
	WHITE-SPACE: nowrap
}
.paramname {
	COLOR: #602020; FONT-STYLE: italic; WHITE-SPACE: nowrap
}
.ftvtree {
	MARGIN: 0.5em; FONT-FAMILY: sans-serif
}
.directory {
	FONT-WEIGHT: bold; FONT-SIZE: 9pt
}
.directory H3 {
	FONT-SIZE: 11pt; MARGIN: 1em 0px 0px
}
.directory > H3 {
	MARGIN-TOP: 0px
}
.directory P {
	MARGIN: 0px; WHITE-SPACE: nowrap
}
.directory DIV {
	DISPLAY: none; MARGIN: 0px
}
.directory IMG {
	VERTICAL-ALIGN: -30%
}

------=_NextPart_000_0077_01C81100.9C3F5E90
Content-Type: text/css;
	charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://faculty.washington.edu/jstraub/dsa/aexp/doc/html/tabs.css

DIV.tabs {
	BACKGROUND: url(tab_b.gif) repeat-x 50% bottom; FLOAT: left; =
MARGIN-BOTTOM: 4px; WIDTH: 100%
}
DIV.tabs UL {
	PADDING-LEFT: 10px; MARGIN: 0px; LIST-STYLE-TYPE: none
}
DIV.tabs LI {
	PADDING-RIGHT: 0px; DISPLAY: inline; PADDING-LEFT: 0px; PADDING-BOTTOM: =
0px; MARGIN: 0px; PADDING-TOP: 0px
}
DIV.tabs FORM {
	PADDING-RIGHT: 0px; DISPLAY: inline; PADDING-LEFT: 0px; PADDING-BOTTOM: =
0px; MARGIN: 0px; PADDING-TOP: 0px
}
DIV.tabs FORM {
	FLOAT: right
}
DIV.tabs A {
	FONT-WEIGHT: bold; FONT-SIZE: x-small; BACKGROUND: url(tab_r.gif) =
no-repeat right top; FLOAT: left; BORDER-BOTTOM: #84b0c7 1px solid; =
TEXT-DECORATION: none
}
DIV.tabs A:hover {
	BACKGROUND-POSITION: 100% -150px
}
DIV.tabs A:link {
	COLOR: #1a419d
}
DIV.tabs A:visited {
	COLOR: #1a419d
}
DIV.tabs A:active {
	COLOR: #1a419d
}
DIV.tabs A:hover {
	COLOR: #1a419d
}
DIV.tabs SPAN {
	PADDING-RIGHT: 9px; DISPLAY: block; PADDING-LEFT: 9px; BACKGROUND: =
url(tab_l.gif) no-repeat left top; FLOAT: left; PADDING-BOTTOM: 5px; =
PADDING-TOP: 5px; WHITE-SPACE: nowrap
}
DIV.tabs INPUT {
	DISPLAY: inline; FONT-SIZE: 1em; FLOAT: right
}
DIV.tabs TD {
	FONT-WEIGHT: bold; FONT-SIZE: x-small; TEXT-DECORATION: none
}
DIV.tabs SPAN {
	FLOAT: none
}
DIV.tabs A:hover SPAN {
	BACKGROUND-POSITION: 0% -150px
}
DIV.tabs LI#current A {
	BORDER-TOP-WIDTH: 0px; BACKGROUND-POSITION: 100% -150px; =
BORDER-LEFT-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; BORDER-RIGHT-WIDTH: =
0px
}
DIV.tabs LI#current SPAN {
	BACKGROUND-POSITION: 0% -150px; PADDING-BOTTOM: 6px
}
DIV.nav {
	BORDER-RIGHT: medium none; BORDER-TOP: medium none; BACKGROUND: none =
transparent scroll repeat 0% 0%; BORDER-LEFT: medium none; =
BORDER-BOTTOM: #84b0c7 1px solid
}

------=_NextPart_000_0077_01C81100.9C3F5E90--
